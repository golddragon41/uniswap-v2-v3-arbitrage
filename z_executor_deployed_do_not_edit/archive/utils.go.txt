package executor

//payload builder, shared memory transfer of transaction to geth, etc.. should be in here

import (
	"fmt"
	"math/big"
	"mev-template-go/types"
	"mev-template-go/uniswap_v2"
	UniV2Pair "mev-template-go/uniswap_v2/contracts/uniswap_v2_pair"
	"strings"

	//"github.com/umbracle/ethgo/abi"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/ethclient"
)

func GetUniswapV3SwapCallData(
	recipient common.Address,
	zeroForOne bool,
	amountSpecified *big.Int,
	sqrtPriceLimitX96 *big.Int,
	data []byte,
) ([]byte, error) {
	uniswapV3PoolSwapABI := `[{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bool","name":"zeroForOne","type":"bool"},{"internalType":"int256","name":"amountSpecified","type":"int256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"}]`
	uniswapV3PoolAbi, err := abi.JSON(strings.NewReader(uniswapV3PoolSwapABI))
	if err != nil {
		return nil, err
	}

	return uniswapV3PoolAbi.Pack("swap", common.HexToAddress(executorAddressString), zeroForOne, amountSpecified, sqrtPriceLimitX96, data)
}

func GetUniswapV2SwapCallData(
	amountOut0 *big.Int,
	amountOut1 *big.Int,
	recipient common.Address,
	data []byte,
) ([]byte, error) {
	pairAbi, err := abi.JSON(strings.NewReader(UniV2Pair.UniV2PairMetaData.ABI))
	if err != nil {
		return nil, err
	}
	return pairAbi.Pack("swap", amountOut0, amountOut1, recipient, data)

}

//pads bytes to a certain length
func padBytes(input []byte, length int) []byte {
	if len(input) >= length {
		return input
	}

	padded := make([]byte, length)
	copy(padded[length-len(input):], input)

	return padded
}

func getGasOfCalldata(data []byte) uint64 {
	//for each 0 byte, add 4 gas, for each non-0 byte, add 16 gas
	gas := uint64(0)
	for i := 0; i < len(data); i++ {
		if data[i] == 0 {
			gas += 4
		} else {
			gas += 16
		}
	}
	return gas
}

//function that takes an aribtrary amount of big.Ints and returns the max number of bytes to represent the largest number
func getMaxIntByteSize(amounts ...*big.Int) int {
	max := new(big.Int).Set(amounts[0])
	for i := 1; i < len(amounts); i++ {
		if max.Cmp(amounts[i]) == -1 {
			max = new(big.Int).Set(amounts[i])
		}
	}
	return len(max.Bytes())
}

//function that takes amountOuts0 and amountOuts1 and returns the amountOutIndexes as a byte with the leftmost bit being the first index
func getAmountOutIndexes(amountOuts0, amountOuts1 []*big.Int) byte {
	amountOutIndexes := byte(0)
	for i := 0; i < len(amountOuts0); i++ {
		if amountOuts0[i].Cmp(amountOuts1[i]) == -1 {
			amountOutIndexes |= 1 << uint(i)
		}
	}
	return amountOutIndexes
}

//function that takes a path and gets amountouts with amountoutindexes
func getAmountOuts(path types.Path) ([]*big.Int, []*big.Int) {
	//getAmountOuts0 and getAmountOuts1
	amountOuts0 := make([]*big.Int, len(path.Pools))
	amountOuts1 := make([]*big.Int, len(path.Pools))
	currentAmount := new(big.Int).Set(path.AmountIn)
	currToken := path.BaseToken
	fmt.Println("Base token", path.BaseToken)
	for i := 0; i < len(path.Pools); i++ {
		fmt.Println("pool: ", i)
		fmt.Println("amountIn: ", currentAmount.String())
		if currToken == path.Pools[i].Token0 { //not flipped
			currentAmount.uniswap_v2.GetAmountOut(currentAmount, path.Pools[i].Reserve0, path.Pools[i].Reserve1))
			amountOuts0[i] = new(big.Int).Set(big.NewInt(0))
			amountOuts1[i] = new(big.Int).Set(currentAmount)
			currToken = path.Pools[i].Token1
		} else { //flipped
			currentAmount.Set(uniswap_v2.GetAmountOut(currentAmount, path.Pools[i].Reserve1, path.Pools[i].Reserve0))
			amountOuts0[i] = new(big.Int).Set(currentAmount)
			amountOuts1[i] = new(big.Int).Set(big.NewInt(0))
			currToken = path.Pools[i].Token0
		}
		fmt.Println("address: ", path.Pools[i].Address)
		fmt.Println("token0: ", path.Pools[i].Token0)
		fmt.Println("token1: ", path.Pools[i].Token1)
		fmt.Println("reserve0: ", path.Pools[i].Reserve0.String())
		fmt.Println("reserve1: ", path.Pools[i].Reserve1.String())
		fmt.Println("amountOut0: ", amountOuts0[i].String())
		fmt.Println("amountOut1: ", amountOuts1[i].String())
	}
	fmt.Println("amountOuts0: ", amountOuts0)
	fmt.Println("amountOuts1: ", amountOuts1)
	return amountOuts0, amountOuts1
}

func UpdatePools(pools []types.PoolInterface, client *ethclient.Client) error {
	for i := 0; i < len(pools); i++ {
		pools[i].Update(client)
	}
	return nil
}

func UpdateReservesOfPath(path *types.Path, client *ethclient.Client) {
	fmt.Println("updated reserves of path: ")
	for i := 0; i < len(path.Pools); i++ {
		//get reserves

		fmt.Println("pool: ", i)
		fmt.Println("address: ", path.Pools[i].Address)
		fmt.Println("token0: ", path.Pools[i].Token0)
		fmt.Println("token1: ", path.Pools[i].Token1)
		fmt.Println("old reserve0: ", path.Pools[i].Reserve0.String())
		fmt.Println("old reserve1: ", path.Pools[i].Reserve1.String())

		reserve0, reserve1, err := uniswap_v2.GetReserves(path.Pools[i].Address, client)
		if err != nil {
			fmt.Println("error getting reserves: ", err)
		}
		path.Pools[i].Reserve0 = reserve0
		path.Pools[i].Reserve1 = reserve1

		fmt.Println("new reserve0: ", path.Pools[i].Reserve0.String())
		fmt.Println("new reserve1: ", path.Pools[i].Reserve1.String())

	}
}
